@using Application.PluginInterfaces.User
@using Application.User
@using Domain.Entities.User
@using Domain.Enums
@using HybridMobileProj.Client.Stores.Undo
@using HybridMobileProj.Client.Stores.Users


@inject NavigationManager NavigationManager
@inject IPropertyManagerRepository PropertyManagerRepository
@inject IContractorRepository ContractorRepository
@inject ISurveyorRepository SurveyorRepository

<div class="flex w-full justify-between mobile-padding h-[4.375rem] relative z-[10] bg-white drop-shadow">
    <div class="flex justify-center items-center gap-3">
        <img src="images/hamburger.svg" alt="" class="transition-all duration-200 ease-in-out w-4 cursor-pointer"
            @onclick="ToggleNav">
        <img src="images/right-arrow.svg" alt=""
            class="transition-all duration-200 ease-in-out w-4 cursor-pointer rotate-180" @onclick="() => GoBack()">
    </div>

    <div class="flex items-center justify-between gap-1">
        <img src="images/user-icon.svg" alt="" class="w-7 h-7 cursor-pointer"
            @onclick="() => showUserInfo = !showUserInfo">
        <div class="">
            <h3 class="text-12px text-primary-color">Bilal Uddin</h3>
            <p class="text-10px text-secondary-color">@CurrentUser.UserEnumText</p>
        </div>

        <div
            class="border-x-2 border-y-2 z-[1000] absolute right-5 top-14 max-h-96 w-80 overflow-auto rounded border border-[#E9EBEC] bg-white px-4 py-4 @(showUserInfo ? "block" : "hidden")">
            <p class="mt-1 cursor-pointer text-sm text-[#878A99] flex justify-between gap-4">
                <b @onclick="() => CurrentUser.UpdateUserType(UserEnum.PropertyManager)">PM</b>
                <b @onclick="() => CurrentUser.UpdateUserType(UserEnum.Contractor)">Contractor</b>
                <b @onclick="() => CurrentUser.UpdateUserType(UserEnum.Surveyor)">Surveyor</b>
            </p>
        </div>
    </div>
</div>

<nav
    class="transition-all duration-200 ease-in-out mobile-padding h-12 bg-[#3B3E41] text-white flex justify-between items-center text-12px w-full absolute z-[1] @(navState == true ? "top-[70px]" : "top-0")">
    <div>
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick=ToggleNav>
            Requests
        </NavLink>
    </div>
    <div>
        <NavLink class="nav-link" href="quotes" @onclick=ToggleNav>
            Quotes
        </NavLink>
    </div>
    <div class="@(CurrentUser.User == UserEnum.PropertyManager ? "block" : "hidden")">
        <NavLink class="nav-link" href="properties" @onclick=ToggleNav>
            Properties
        </NavLink>
    </div>
</nav>

@code
{
    bool showUserInfo = false;

    UndoStack Undo = UndoStack.Instance();

    object LoggedUser;

    bool navState { get; set; } = false; // False = closed. True = open
    public PropertyManagerService _propertyManagerService;
    public ContractorService _contractorService;
    public SurveyorService _surveyorService;
    CurrentUserSingleton CurrentUser = CurrentUserSingleton.Instance();


    public IEnumerable<PropertyManager> propertyManagers;
    public IEnumerable<Surveyor> surveyors;

    protected void ToggleNav()
    {
        navState = !navState;
    }

    protected override async Task OnInitializedAsync()
    {
        UndoStack Undo = UndoStack.Instance();

        Undo.OnChange += () => StateHasChanged();
        StateHasChanged();

        CurrentUser.OnChange += StateHasChanged;
        CurrentUser.UpdateUserType(UserEnum.PropertyManager);

        _propertyManagerService = new PropertyManagerService(PropertyManagerRepository);
        _surveyorService = new SurveyorService(SurveyorRepository);

        propertyManagers = await _propertyManagerService.GetAllPropertyManagersAsync();
        surveyors = await _surveyorService.GetAllSurveyorsAsync();
    }

    private void GoBack()
    {

        if (Undo.Pointer != 0)
        {
            NavigationManager.NavigateTo(Undo.Pop());
        }
    }

    public void Dispose()
    {
        CurrentUser.OnChange -= StateHasChanged;
    }
}
